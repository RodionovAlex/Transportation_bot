import psycopg2
import telebot
import re
from datetime import datetime
from telebot import types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
admin_id =   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
user_data = {}
registration_state = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    try:
        conn = psycopg2.connect(
            dbname="Rodionov",
            user="alex",
            password="1234",
            host="localhost",
            port="5432",
            client_encoding='UTF8'  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ UTF8
        )
        return conn
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_user_existence(chat_id):
    conn = get_db_connection()
    if conn is None:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    try:
        with conn.cursor() as cur:
            cur.execute("SELECT chat_id FROM users WHERE chat_id = %s", (chat_id,))
            result = cur.fetchone()
            if result:
                return True, None
            else:
                return False, None
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    finally:
        if conn is not None:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def delete_user(chat_id):
    conn = get_db_connection()
    if conn is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    try:
        with conn.cursor() as cur:
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            cur.execute("DELETE FROM responses WHERE chat_id = %s", (chat_id,))
            cur.execute("DELETE FROM users WHERE chat_id = %s", (chat_id,))
            conn.commit()
        
        return "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
    
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
    finally:
        if conn is not None:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def cancel_registration(chat_id):
    if chat_id in registration_state:
        del registration_state[chat_id]
    if chat_id in user_data:
        del user_data[chat_id]
    return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if chat_id == admin_id:
        # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        markup.row(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å üì¢'))
        markup.row(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìã'))
        markup.row(types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º üö´'))
    else:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        exists, _ = check_user_existence(chat_id)
        if exists:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            markup.row(types.KeyboardButton('–ü—Ä–∞–π—Å üíµ'), types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå'))
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            markup.row(types.KeyboardButton('–ü—Ä–∞–π—Å üíµ'), types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚è∞'))
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
def is_user_blacklisted(chat_id):
    conn = get_db_connection()
    if conn is None:
        return False

    try:
        with conn.cursor() as cur:
            cur.execute("SELECT chat_id FROM blacklist WHERE chat_id = %s", (chat_id,))
            result = cur.fetchone()
            return result is not None
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    if is_user_blacklisted(chat_id):
        bot.send_message(chat_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ΩüíÄ. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞‚ùóÔ∏è")
        return
    send_main_menu(chat_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå"
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚ùå')
def delete_account(message):
    chat_id = message.chat.id
    response_message = delete_user(chat_id)
    bot.send_message(chat_id, response_message)
    send_main_menu(chat_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìã' and message.chat.id == admin_id)
def view_all_users(message):
    conn = get_db_connection()
    if conn is None:
        bot.send_message(admin_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        with conn.cursor() as cur:
            cur.execute("SELECT chat_id, full_name FROM users")
            users = cur.fetchall()
            if users:
                user_list = "\n".join([f"–§–ò–û:{user[1]}\n ID: {user[0]}\n" for user in users])
                bot.send_message(admin_id, f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{user_list}")
            else:
                bot.send_message(admin_id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except psycopg2.Error as e:
        bot.send_message(admin_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if conn is not None:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º üö´' and message.chat.id == admin_id)
def manage_blacklist(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚ûï'))
    markup.row(types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚ûñ'))
    markup.row(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üíÄ'))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    markup.row(types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è'))
    
    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
def add_to_blacklist(user_id):
    conn = get_db_connection()
    if conn is None:
        return False

    try:
        with conn.cursor() as cur:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            cur.execute("INSERT INTO blacklist (chat_id) VALUES (%s) ON CONFLICT DO NOTHING", (user_id,))
            conn.commit()
        return True
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
def remove_from_blacklist(user_id):
    conn = get_db_connection()
    if conn is None:
        return False

    try:
        with conn.cursor() as cur:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            cur.execute("DELETE FROM blacklist WHERE chat_id = %s", (user_id,))
            conn.commit()
        return True
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
        return False
    finally:
        if conn is not None:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚ûï' and message.chat.id == admin_id)
def ask_user_id_to_blacklist(message):
    bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
    bot.register_next_step_handler(message, handle_add_to_blacklist)

def handle_add_to_blacklist(message):
    try:
        user_id = int(message.text)
        success = add_to_blacklist(user_id)
        if success:
            bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
        else:
            bot.send_message(admin_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    except ValueError:
        bot.send_message(admin_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚ûñ' and message.chat.id == admin_id)
def ask_user_id_to_remove_from_blacklist(message):
    bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, handle_remove_from_blacklist)

def handle_remove_from_blacklist(message):
    try:
        user_id = int(message.text)
        success = remove_from_blacklist(user_id)
        if success:
            bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        else:
            bot.send_message(admin_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
    except ValueError:
        bot.send_message(admin_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è' and message.chat.id == admin_id)
def go_back(message):
    send_main_menu(admin_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üíÄ' and message.chat.id == admin_id)
def view_blacklist(message):
    conn = get_db_connection()
    if conn is None:
        bot.send_message(admin_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –∏—Ö –ø–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞
            cur.execute("""
                SELECT b.chat_id, u.full_name
                FROM blacklist b
                LEFT JOIN users u ON b.chat_id = u.chat_id
            """)
            blacklist_users = cur.fetchall()
            if blacklist_users:
                user_list = "\n".join([f"–§–ò–û: {user[1] if user[1] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n ID: {user[0]}\n" for user in blacklist_users])
                bot.send_message(admin_id, f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:\n\n{user_list}")
            else:
                bot.send_message(admin_id, "–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except psycopg2.Error as e:
        bot.send_message(admin_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if conn is not None:
            conn.close()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚è∞"
@bot.message_handler(func=lambda message: message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚è∞')
def ask_fullname(message):
    chat_id = message.chat.id
    exists, response_message = check_user_existence(chat_id)
    if exists:
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã‚úÖ")
        send_main_menu(chat_id)
    if is_user_blacklisted(chat_id):
        bot.send_message(chat_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞‚ùóÔ∏è")
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_state[chat_id] = 'awaiting_fullname'
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è")
        bot.register_next_step_handler(message, activity_fullname)

def activity_fullname(message):
    chat_id = message.chat.id
    if chat_id in registration_state and registration_state[chat_id] == 'awaiting_fullname':
        user_data[chat_id] = {'full_name': message.text}
        registration_state[chat_id] = 'awaiting_phone'
        bot.send_message(chat_id, "–§–ò–û –∑–∞–ø–∏—Å–∞–Ω–æ‚úÖ.\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        bot.register_next_step_handler(message, activity_phone)
    else:
        bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    
def activity_phone(message):
    chat_id = message.chat.id
    phone = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^\+7\d{10}$', phone):
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞–±—Ä–∞–Ω –Ω–æ–º–µ—Ä‚ùóÔ∏è\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        bot.register_next_step_handler(message, activity_phone)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à–∞–≥–∞
        return
    
    user_data[chat_id]['phone'] = phone
    bot.send_message(chat_id, "–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–ø–∏—Å–∞–Ω‚úÖ.\n –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—èüè†:")
    bot.register_next_step_handler(message, activity_residence)


def activity_residence(message):
    chat_id = message.chat.id
    user_data[chat_id]['residence'] = message.text
    bot.send_message(chat_id, "–ì–æ—Ä–æ–¥ –∑–∞–ø–∏—Å–∞–Ω‚úÖ\n –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    bot.register_next_step_handler(message, activity_birthday)

def activity_birthday(message):
    chat_id = message.chat.id
    birthday_str = message.text

    try:
        birthday = datetime.strptime(birthday_str, "%d.%m.%Y")
        age = (datetime.now() - birthday).days // 365

        if age < 18:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å üîû –ª–µ—Ç –∏ —Å—Ç–∞—Ä—à–µüòî.")
            return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è‚ùóÔ∏è\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(message, activity_birthday)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à–∞–≥–∞
        return
    
    user_data[chat_id]['birthday'] = birthday_str
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–∞, –ø—Ä–∏–º–µ–Ω–∏—Ç—å‚úÖ", callback_data="apply_yes"))
    markup.add(types.InlineKeyboardButton("–ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚Ü©Ô∏è", callback_data="apply_no"))
    
    bot.send_message(chat_id, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞‚úÖ\n –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["apply_yes", "apply_no"])
def handle_apply_query(call):
    chat_id = call.message.chat.id
    
    if call.data == "apply_yes":
        apply_data(call.message)
    elif call.data == "apply_no":
        reset_data(call.message)

def apply_data(message):
    conn = get_db_connection()
    if conn is None:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    chat_id = message.chat.id
    try:
        with conn.cursor() as cur:
            user_info = user_data.get(chat_id)
            cur.execute("SELECT chat_id FROM users WHERE chat_id = %s", (chat_id,))
            if cur.fetchone() is not None:
                bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã‚úÖ")
                return
            
            cur.execute("""
                INSERT INTO users (chat_id, full_name, phone, residence, birthday) 
                VALUES (%s, %s, %s, %s, %s)
            """, (chat_id, user_info['full_name'], user_info['phone'], user_info['residence'], user_info['birthday']))
            
            conn.commit()
        
        bot.send_message(chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞üéâüéâüéâüéâ\n –ñ–¥–∏—Ç–µ –∑–∞—è–≤–∫–∏ –∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ –Ω–∏—Ö –æ—Ç–ª–∏–∫–∞–π—Ç–µ—Å—å‚ùï")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[chat_id]['registered'] = True
        
        bot.send_message(admin_id,
            f"–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}\n"
            f"–§–ò–û: {user_info['full_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}\n"
            f"–ì–æ—Ä–æ–¥: {user_info['residence']}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_info['birthday']}"
        )
        
        send_main_menu(chat_id)
    except psycopg2.Error as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if conn is not None:
            conn.close()

def reset_data(message):
    chat_id = message.chat.id
    cancel_registration(chat_id)
    ask_fullname(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–π—Å üíµ"
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∞–π—Å üíµ')
def send_price(message):
    chat_id = message.chat.id
    if is_user_blacklisted(chat_id):
        bot.send_message(chat_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ΩüíÄ. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞‚ùóÔ∏è")
        return
    bot.send_message(chat_id, "–í —á–∞—Å –ø–ª–∞—á—É 100—Ä—É–±\n –ó–∞ –∫–æ—Å—è–∫–∏ —à—Ç—Ä–∞—Ñ 150 —Ä—É–±.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å üì¢"
@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å üì¢' and message.chat.id == admin_id)
def send_request(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:")
    bot.register_next_step_handler(message, ask_max_responses)

def ask_max_responses(message):
    request_text = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤:")
    bot.register_next_step_handler(message, handle_max_responses, request_text)

def handle_max_responses(message, request_text):
    max_responses = message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
    if not max_responses.isdigit() or int(max_responses) <= 0:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, handle_max_responses, request_text)
        return

    max_responses = int(max_responses)
    
    conn = get_db_connection()
    if conn is None:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO requests (admin_id, request_text, response_count, max_responses) 
                VALUES (%s, %s, %s, %s) RETURNING request_id
            """, (admin_id, request_text, 0, max_responses))
            request_id = cur.fetchone()[0]
            conn.commit()
        
        bot.send_message(admin_id, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}")
        send_request_to_users(request_id, request_text)
    except psycopg2.Error as e:
        bot.send_message(admin_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if conn is not None:
            conn.close()

def send_request_to_users(request_id, request_text):
    conn = get_db_connection()
    if conn is None:
        bot.send_message(admin_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        with conn.cursor() as cur:
            cur.execute("SELECT chat_id FROM users")
            users = cur.fetchall()
            for user in users:
                chat_id = user[0]
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"response_{request_id}"))
                
                bot.send_message(chat_id, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n {request_text}", reply_markup=markup)
    except psycopg2.Error as e:
        bot.send_message(admin_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if conn is not None:
            conn.close()
 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("response_"))
def handle_response(call):
    request_id = int(call.data.split("_")[1])
    chat_id = call.message.chat.id

    if is_user_blacklisted(chat_id):
        bot.send_message(chat_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        return

    conn = get_db_connection()
    if conn is None:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
            cur.execute("SELECT * FROM responses WHERE request_id = %s AND chat_id = %s", (request_id, chat_id))
            if cur.fetchone():
                bot.send_message(chat_id, "–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤
            cur.execute("SELECT response_count, max_responses FROM requests WHERE request_id = %s", (request_id,))
            result = cur.fetchone()
            if not result:
                bot.send_message(chat_id, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            response_count, max_responses = result

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞, –æ—Ç–∫–ª–æ–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∫–ª–∏–∫–∏
            if response_count >= max_responses:
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –∑–∞—è–≤–∫—É —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å.üòî")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur.execute("""
                INSERT INTO responses (request_id, chat_id) 
                VALUES (%s, %s)
            """, (request_id, chat_id))
            conn.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ requests
            cur.execute("""
                UPDATE requests 
                SET response_count = response_count + 1 
                WHERE request_id = %s
            """, (request_id,))
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–µ–º—Å—è –Ω–∞ –∑–∞—è–≤–∫—É
            cur.execute("SELECT full_name, phone, residence, birthday FROM users WHERE chat_id = %s", (chat_id,))
            user_info = cur.fetchone()

            if user_info:
                full_name, phone, residence, birthday = user_info
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.send_message(
                    admin_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –∑–∞—è–≤–∫—É {request_id}:\n\n"
                    f"–§–ò–û: {full_name}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"–ì–æ—Ä–æ–¥: {residence}\n"
                    f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}\n"
                    f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}"
                )
            
            bot.send_message(chat_id, "–í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ –∑–∞—è–≤–∫—É‚úÖ.\n –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤
            response_count += 1

            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if response_count >= max_responses:
                cur.execute("""
                    UPDATE requests 
                    SET response_count = %s, is_closed = TRUE 
                    WHERE request_id = %s
                """, (response_count, request_id))
                conn.commit()

                bot.send_message(admin_id, f"–ó–∞—è–≤–∫–∞: {request_id}\n –ø–æ–ª—É—á–∏–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ —Ç–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã—Ç–∞.")
        
    except psycopg2.Error as e:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if conn is not None:
            conn.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
